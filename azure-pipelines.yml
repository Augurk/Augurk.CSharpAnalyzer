# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/vsts/pipelines/apps/windows/dot-net

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

jobs:
- job: Windows
  pool:
    vmImage: 'VS2017-Win2016'
  steps:
    - task: NuGetToolInstaller@0

    - task: GitVersion@3
      inputs:
        updateAssemblyInfo: true

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        msbuildArgs: '/p:Version=$(GitVersion.MajorMinorPatch) /p:InformationalVersion=$(GitVersion.InformationalVersion)'

    - task: VSTest@2
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        testAssemblyVer2: '$(Build.SourcesDirectory)\src\Augurk.CSharpAnalyzer.Specifications\bin\$(buildConfiguration)\Augurk.CSharpAnalyzer.Specifications.dll'
        codeCoverageEnabled: True
        otherConsoleOptions: '/platform:X64'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)\src\Augurk.CSharpAnalyzer.NetFx\bin\$(buildConfiguration)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)\Augurk.CSharpAnalyzer-win-x64-$(Build.BuildNumber).zip'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: Windows
        publishLocation: Container

    - powershell: |
        echo "##vso[task.setvariable variable=GitVersion.MajorMinorPatch;isOutput=true]$(GitVersion.MajorMinorPatch)"
        echo "##vso[task.setvariable variable=GitVersion.InformationalVersion;isOutput=true]$(GitVersion.InformationalVersion)"
        echo "##vso[task.setvariable variable=Build.BuildNumber;isOutput=true]$(Build.BuildNumber)"
      name: setOutputVariables

- job: macOS
  dependsOn: Windows # For now, since we can't run GitVersion on macOS
  pool:
    vmImage: macOS-10.13
  variables:
    GitVersion.MajorMinorPatch: $[dependencies.Windows.outputs['setOutputVariables.GitVersion.MajorMinorPatch']]
    GitVersion.InformationalVersion: $[dependencies.Windows.outputs['setOutputVariables.GitVersion.InformationalVersion']]
    Build.BuildNumber: $[dependencies.Windows.outputs['setOutputVariables.Build.BuildNumber']]
  steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: build
        projects: 'src/Augurk.CSharpAnalyzer.NetCore/Augurk.CSharpAnalyzer.NetCore.csproj'
        arguments: '-r osx-x64 -c $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      enabled: false # For now since we don't have a viable testing project
      inputs:
        command: test
        projects: 'src/Augurk.CSharpAnalyzer.UnitTest/Augurk.CSharpAnalyzer.UnitTest.csproj'
        continueOnError: true

    - task: DotNetCoreCLI@2
      inputs:
        command: publish
        projects: 'src/Augurk.CSharpAnalyzer.NetCore/Augurk.CSharpAnalyzer.NetCore.csproj'
        arguments: '-r osx-x64 -c $(buildConfiguration) /p:Version=$(GitVersion.MajorMinorPatch) /p:InformationalVersion=$(GitVersion.InformationalVersion)'
        zipAfterPublish: false
        publishWebProjects: false

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/src/Augurk.CSharpAnalyzer.NetCore/bin/$(buildConfiguration)/netcoreapp2.1/osx-x64/publish/'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/Augurk.CSharpAnalyzer-osx-x64-$(Build.BuildNumber).zip'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: macOS
        publishLocation: Container

- job: Linux
  dependsOn: Windows # For now, since we can't run GitVersion on macOS
  pool:
    vmImage: ubuntu-16.04
  variables:
    GitVersion.MajorMinorPatch: $[dependencies.Windows.outputs['setOutputVariables.GitVersion.MajorMinorPatch']]
    GitVersion.InformationalVersion: $[dependencies.Windows.outputs['setOutputVariables.GitVersion.InformationalVersion']]
    Build.BuildNumber: $[dependencies.Windows.outputs['setOutputVariables.Build.BuildNumber']]
  steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: build
        projects: 'src/Augurk.CSharpAnalyzer.NetCore/Augurk.CSharpAnalyzer.NetCore.csproj'
        arguments: '-r linux-x64 -c $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      enabled: false # For now since we don't have a viable testing project
      inputs:
        command: test
        projects: 'src/Augurk.CSharpAnalyzer.UnitTest/Augurk.CSharpAnalyzer.UnitTest.csproj'

    - task: DotNetCoreCLI@2
      inputs:
        command: publish
        projects: 'src/Augurk.CSharpAnalyzer.NetCore/Augurk.CSharpAnalyzer.NetCore.csproj'
        arguments: '-r linux-x64 -c $(buildConfiguration) /p:Version=$(GitVersion.MajorMinorPatch) /p:InformationalVersion=$(GitVersion.InformationalVersion)'
        zipAfterPublish: false
        publishWebProjects: false

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/src/Augurk.CSharpAnalyzer.NetCore/bin/$(buildConfiguration)/netcoreapp2.1/linux-x64/publish/'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/Augurk.CSharpAnalyzer-linux-x64-$(Build.BuildNumber).zip'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: Linux
        publishLocation: Container
