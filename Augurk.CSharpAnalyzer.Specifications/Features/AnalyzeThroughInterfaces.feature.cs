// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Augurk.CSharpAnalyzer.Specifications.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AnalyzeThroughInterfacesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "AnalyzeThroughInterfaces.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Analyze Through Interfaces", "\tThe C# analyzer will attempt to resolve the concrete type with an interface\r\n\twh" +
                    "en it is clearly declared in code.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Analyze Through Interfaces")))
            {
                global::Augurk.CSharpAnalyzer.Specifications.Features.AnalyzeThroughInterfacesFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("entrypoint is an explicit interface implementation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Analyze Through Interfaces")]
        public virtual void EntrypointIsAnExplicitInterfaceImplementation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("entrypoint is an explicit interface implementation", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("\'Cucumis.Specifications\' contains feature files", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("an analysis is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kind",
                        "Local",
                        "Expression/Signature"});
            table1.AddRow(new string[] {
                        "When",
                        "",
                        "entrypoint is an explicit interface implementation"});
            table1.AddRow(new string[] {
                        "Private",
                        "true",
                        "Cucumis.Gardener.Cucumis.IGardener.Plant(), Cucumis"});
            table1.AddRow(new string[] {
                        "Public",
                        "",
                        "System.Console.WriteLine(string), mscorlib"});
#line 9
 testRunner.Then("the resulting report contains \'When entrypoint is an explicit interface implement" +
                    "ation\'", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("entrypoint is an implicit interface implementation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Analyze Through Interfaces")]
        public virtual void EntrypointIsAnImplicitInterfaceImplementation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("entrypoint is an implicit interface implementation", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("\'Cucumis.Specifications\' contains feature files", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.When("an analysis is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kind",
                        "Local",
                        "Expression/Signature"});
            table2.AddRow(new string[] {
                        "When",
                        "",
                        "entrypoint is an implicit interface implementation"});
            table2.AddRow(new string[] {
                        "Public",
                        "true",
                        "Cucumis.Gardener.WaterPlants(), Cucumis"});
            table2.AddRow(new string[] {
                        "Public",
                        "",
                        "System.Console.WriteLine(string), mscorlib"});
#line 19
 testRunner.Then("the resulting report contains \'When entrypoint is an implicit interface implement" +
                    "ation\'", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("entrypoint is invoked after invocation on interface")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Analyze Through Interfaces")]
        public virtual void EntrypointIsInvokedAfterInvocationOnInterface()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("entrypoint is invoked after invocation on interface", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("\'Cucumis.Specifications\' contains feature files", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.When("an analysis is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kind",
                        "Local",
                        "Expression/Signature"});
            table3.AddRow(new string[] {
                        "When",
                        "",
                        "entrypoint is invoked after invocation on interface"});
            table3.AddRow(new string[] {
                        "Public",
                        "",
                        "Cucumis.Specifications.Support.MockedGardener.Plant(), Cucumis.Specifications"});
            table3.AddRow(new string[] {
                        "Public",
                        "true",
                        "Cucumis.Gardener.WaterPlants(), Cucumis"});
            table3.AddRow(new string[] {
                        "Public",
                        "",
                        "System.Console.WriteLine(string), mscorlib"});
#line 29
 testRunner.Then("the resulting report contains \'When entrypoint is invoked after invocation on int" +
                    "erface\'", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
