// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Augurk.CSharpAnalyzer.Specifications.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AnalyzingAnti_PatternsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "AnalyzingAntiPatterns.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Analyzing Anti-patterns", "\tThis feature describes various anti-patterns that might be used in the wild whic" +
                    "h we do want to support, but do not recommend to use.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Analyzing Anti-patterns")))
            {
                global::Augurk.CSharpAnalyzer.Specifications.Features.AnalyzingAnti_PatternsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("the automated code cannot be invoked directly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Analyzing Anti-patterns")]
        public virtual void TheAutomatedCodeCannotBeInvokedDirectly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("the automated code cannot be invoked directly", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("\'Cucumis.Specifications\' contains feature files", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("an analysis is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kind",
                        "Local",
                        "Expression/Signature",
                        "AutomationTargets"});
            table1.AddRow(new string[] {
                        "When",
                        "",
                        "the automated code cannot be invoked directly",
                        "[\"Cucumis.Melothria.Wither(), Cucumis\"]"});
            table1.AddRow(new string[] {
                        "Public",
                        "true",
                        "Cucumis.Plant.FreezeAndThaw(), Cucumis",
                        ""});
            table1.AddRow(new string[] {
                        "Public",
                        "true",
                        "Cucumis.Melothria.Wither(), Cucumis",
                        ""});
            table1.AddRow(new string[] {
                        "Private",
                        "true",
                        "Cucumis.Melothria.Rot(), Cucumis",
                        ""});
            table1.AddRow(new string[] {
                        "Public",
                        "",
                        "System.Console.WriteLine(string), mscorlib",
                        ""});
#line 10
 testRunner.Then("the resulting report contains \'When the automated code cannot be invoked directly" +
                    "\'", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("only the top level overload should match")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Analyzing Anti-patterns")]
        public virtual void OnlyTheTopLevelOverloadShouldMatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("only the top level overload should match", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("\'Cucumis.Specifications\' contains feature files", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When("an analysis is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kind",
                        "Local",
                        "Expression/Signature",
                        "AutomationTargets"});
            table2.AddRow(new string[] {
                        "When",
                        "",
                        "only the top level overload should match",
                        "[\"Cucumis.Gardener.Water(Cucumis.Plant), Cucumis\"]"});
            table2.AddRow(new string[] {
                        "Public",
                        "true",
                        "Cucumis.Plant.Water(Cucumis.Gardener), Cucumis",
                        ""});
            table2.AddRow(new string[] {
                        "Internal",
                        "true",
                        "Cucumis.Gardener.Water(Cucumis.Plant), Cucumis",
                        ""});
            table2.AddRow(new string[] {
                        "Internal",
                        "true",
                        "Cucumis.Gardener.Water(System.Collections.Generic.IEnumerable<Cucumis.Plant>), Cu" +
                            "cumis",
                        ""});
            table2.AddRow(new string[] {
                        "Public",
                        "",
                        "System.Console.WriteLine(string), mscorlib",
                        ""});
#line 22
 testRunner.Then("the resulting report contains \'When only the top level overload should match\'", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("only the lowest level overload should match")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Analyzing Anti-patterns")]
        public virtual void OnlyTheLowestLevelOverloadShouldMatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("only the lowest level overload should match", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("\'Cucumis.Specifications\' contains feature files", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.When("an analysis is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kind",
                        "Local",
                        "Expression/Signature",
                        "AutomationTargets"});
            table3.AddRow(new string[] {
                        "When",
                        "",
                        "only the lowest level overload should match",
                        "[\"Cucumis.Gardener.Water(System.Collections.Generic.IEnumerable<Cucumis.Plant>), " +
                            "Cucumis\"]"});
            table3.AddRow(new string[] {
                        "Public",
                        "true",
                        "Cucumis.Plant.Water(Cucumis.Gardener), Cucumis",
                        ""});
            table3.AddRow(new string[] {
                        "Internal",
                        "true",
                        "Cucumis.Gardener.Water(Cucumis.Plant), Cucumis",
                        ""});
            table3.AddRow(new string[] {
                        "Internal",
                        "true",
                        "Cucumis.Gardener.Water(System.Collections.Generic.IEnumerable<Cucumis.Plant>), Cu" +
                            "cumis",
                        ""});
            table3.AddRow(new string[] {
                        "Public",
                        "",
                        "System.Console.WriteLine(string), mscorlib",
                        ""});
#line 34
 testRunner.Then("the resulting report contains \'When only the lowest level overload should match\'", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("all overloads should match")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Analyzing Anti-patterns")]
        public virtual void AllOverloadsShouldMatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("all overloads should match", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 45
 testRunner.Given("\'Cucumis.Specifications\' contains feature files", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
 testRunner.When("an analysis is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kind",
                        "Local",
                        "Expression/Signature",
                        "AutomationTargets"});
            table4.AddRow(new string[] {
                        "When",
                        "",
                        "all overloads should match",
                        "[\"Cucumis.Gardener.Water(Cucumis.Plant), Cucumis\",\"Cucumis.Gardener.Water(System." +
                            "Collections.Generic.IEnumerable<Cucumis.Plant>), Cucumis\"]"});
            table4.AddRow(new string[] {
                        "Public",
                        "true",
                        "Cucumis.Plant.Water(Cucumis.Gardener), Cucumis",
                        ""});
            table4.AddRow(new string[] {
                        "Internal",
                        "true",
                        "Cucumis.Gardener.Water(Cucumis.Plant), Cucumis",
                        ""});
            table4.AddRow(new string[] {
                        "Internal",
                        "true",
                        "Cucumis.Gardener.Water(System.Collections.Generic.IEnumerable<Cucumis.Plant>), Cu" +
                            "cumis",
                        ""});
            table4.AddRow(new string[] {
                        "Public",
                        "",
                        "System.Console.WriteLine(string), mscorlib",
                        ""});
#line 47
 testRunner.Then("the resulting report contains \'When all overloads should match\'", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
